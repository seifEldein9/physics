from math import*
#Electrical and magnetic physics

#A coulomb is equal to how many electrons
def coulombIsEqualToHowManyElectrons(coulomb):
    return (coulomb)*(6.25*pow(10,18))
#Electrons equal to the number of coulombs
def graphelectronsEqualToTheNumberOfCoulombsicAbility(electrons):
    return (electrons)*(1.6*pow(10,-19))
#The work done to move the electric charge
def electricWork(coulomb,volt):
    return (coulomb)*(volt)
#coulomb
def coulomb(work,volt):
    return (work)/(volt)
#current
def current(volt,resistance):
    return (volt)/(resistance)
#Electrical Power
def electricalPower(volt,current):
    return (volt)*(current)
#volt
def volt(current,resistance):
    return (current)*(resistance)
#resistance
def resistance(volt,current):
    return (volt)/(current)
#electrical resistance of the conductor
def conductorResistance(conductiveMaterial,height,area):
    return (conductiveMaterial)*((height)/(area))
#Conductor material type
def conductorMaterialType(resistance,height,area):
    return (resistance)*((area)/(height))
#electrical conductivity
def electricalConductivity(conductorMaterialType):
    return 1/(conductorMaterialType)
#the magnetic field
def magneticField(magneticFlux,area):
    return (magneticFlux)/(area)
#magneticFlux
def magneticFlux(magneticField,area):
    return (magneticField)*(area)
#magnetic flux area
def magneticFluxArea(magneticFlux,magneticField):
    return (magneticFlux)/(magneticField)
#magnetic flux density
def magneticFluxDensity(current,numberOfTurns,magneticPermeability,RadiusLength):
    return (magneticPermeability*numberOfTurns*current)/(2*RadiusLength)
#magnetic field force
def magneticFieldForce(magneticField,current,height):
    return (magneticField)*(current)*(height)
#Magnetic field strength with theta
def magneticFieldForceWithTheta(magneticField,current,height,theta):
    return (magneticField)*(current)*(height)*(sin(theta))
#flux density
def fluxDensity(magneticFieldForce,current,height,theta):
    return (magneticFieldForce)/((current)*(height)*(sin(theta)))
#magnetic moment
def magneticMoment(current,area,numberOfTurns):
    return (current)*(area)*(numberOfTurns)
#The average electromotive force generated by a charged coil
def magneticFaverageElectromotiveForceGeneratedByAChargedCoilieldForce(magneticFlux,time,numberOfTurns):
    return (-numberOfTurns)*((magneticFlux)/(time))
#mutual induction
def mutualInduction(factorAffectingTheInductanceCoefficient,current,time):
    return (-factorAffectingTheInductanceCoefficient)*((current)/(time))
#factorAffectingTheInductanceCoefficient
def factorAffectingTheInductanceCoefficient(mutualInduction,current,time):
    return (mutualInduction)/((current)/(time))
#capacitor capacitance
def capacitorCapacitance(coulomb,volt):
    return (coulomb)/(volt)
#capacitor charge
def capacitorCharge(absoluteInsulationConstant,plateSpace,TheDistanceBetweenThePanels):
    return (absoluteInsulationConstant)*(plateSpace)/(TheDistanceBetweenThePanels)
#wave speed
def waveSpeed(frequencie,waveLength):
    return (frequencie)*(waveLength)
#Convert temperature from Celsius to Kelvin
def ConvertTemperatureFromCelsiusToKelvin(Celsius):
    return (Celsius)+(273)
#Finn Is law
def FinnIslaw(KelvinTemperature):
    return (2.898*pow(10,-3))/(KelvinTemperature)
#bulb filament temperature
def bulbFilamentTemperature(FinnIslaw):
    return (2.898*pow(10,-3))/(FinnIslaw)
#photon energy
def photonEnergy(frequencie):
    return (6.625*pow(10,-34))*(frequencie)
#Planck's constant
def PlanckIsConstant():
    return (6.625*pow(10,-34))
#Conversion from electron volts to joules
def conversionFromElectronVoltsToJoules(ElectronVolts):
    return (ElectronVolts)*(1.6*pow(10,-19))
#Conversion from joules to electron volts
def conversionFromJoulesToElectronVolts(joules):
    return (joules)*(1.25*pow(10,18))
#electron volt
def electronVolt(mass,velocity):
    return (1/2)*(mass*pow(velocity,2))
#futon speed
def futonSpeed(mass,energy):
    return (sqrt(energy/mass))
#Law of conservation of mass and energy
def LawOfConservationOfMassAndEnergy(mass,TheSpeedOfLight):
    return (mass*pow(TheSpeedOfLight,2))
#photon momentum
def photonMomentum(mass,TheSpeedOfLight):
    return (mass)*(TheSpeedOfLight)
#Photon energy in motion
def PhotonEnergyInMotion(Energy,TheSpeedOfLight):
    return (Energy)/(pow(TheSpeedOfLight,2))
#wave length
def waveLength(PhotonEnergyInMotion):
    return (6.625*pow(10,-34))/(PhotonEnergyInMotion)
#Coulomb's law
def CoulombIsLaw(Coulomb1,Coulomb2,length):
    return (8.9875517873681764*pow(10,9))*((Coulomb1*Coulomb2)/(pow(length,2)))
